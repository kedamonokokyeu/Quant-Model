'''
    def valuation_ratios(base_index=None):
        # get yahoo fundamentals
        financial_q = ticker.quarterly_financials.T.copy()
        balance_sheet = ticker.quarterly_balance_sheet.T.copy()

        # guarding against empty returns
        if financial_q.empty and balance_sheet.empty:
            print("No fundamentals found. Returning empty fundamentals.")
            return pd.DataFrame(index=base_index)

        # to make sure datetime index works
        def fix_index(df):
            if df.empty:
                return df
            if isinstance(df.index, pd.PeriodIndex):
                df.index = df.index.to_timestamp()
            else:
                df.index = pd.to_datetime(df.index, errors="coerce")
            df = df[~df.index.isna()]  # drop NaT rows
            return df.sort_index()

        financial_q = fix_index(financial_q)
        balance_sheet = fix_index(balance_sheet)

        # --- column aliases for different yahoo column names ---
        COLUMN_ALIASES = {
            "Total Liab": ["Total Liab", "Total Liabilities Net Minority Interest"],
            "Total Stockholder Equity": ["Total Stockholder Equity", "Ordinary Shares",
                                        "Total Equity Gross Minority Interest"],
            "Total Current Assets": ["Total Current Assets"],
            "Total Current Liabilities": ["Total Current Liabilities"]
        }

        def get_first_available(df, candidates):
            for c in candidates:
                if c in df.columns:
                    return df[c]
            return pd.Series(index=df.index, dtype=float)

        # profit margin and growth
        if "Net Income" in financial_q.columns and "Total Revenue" in financial_q.columns:
            financial_q["ProfitMargin"] = financial_q["Net Income"] / financial_q["Total Revenue"]
            financial_q["Revenue_YoY"] = financial_q["Total Revenue"].pct_change(4, fill_method=None)
            financial_q["ProfitMargin_YoY"] = financial_q["ProfitMargin"].pct_change(4, fill_method=None)

        # debt/equity
        total_liab = get_first_available(balance_sheet, COLUMN_ALIASES["Total Liab"])
        equity = get_first_available(balance_sheet, COLUMN_ALIASES["Total Stockholder Equity"])
        balance_sheet["DebtEquity"] = total_liab / equity
        balance_sheet["DebtEquity_QoQ"] = balance_sheet["DebtEquity"].pct_change(fill_method=None)
        balance_sheet["DebtEquity_YoY"] = balance_sheet["DebtEquity"].pct_change(4, fill_method=None)

        # current ratio
        current_assets = get_first_available(balance_sheet, COLUMN_ALIASES["Total Current Assets"])
        current_liabilities = get_first_available(balance_sheet, COLUMN_ALIASES["Total Current Liabilities"])
        balance_sheet["CurrentRatio"] = current_assets / current_liabilities
        balance_sheet["CurrentRatio_QoQ"] = balance_sheet["CurrentRatio"].pct_change(fill_method=None)

        # combine all fundamentals into pd df
        fundamentals = pd.concat([
            financial_q[["Revenue_YoY", "ProfitMargin", "ProfitMargin_YoY"]] if not financial_q.empty else pd.DataFrame(),
            balance_sheet[["DebtEquity", "DebtEquity_QoQ", "DebtEquity_YoY",
                        "CurrentRatio", "CurrentRatio_QoQ"]] if not balance_sheet.empty else pd.DataFrame()
        ], axis=1)

        if fundamentals.empty:
            print("Fundamentals columns ended up empty.")
            return pd.DataFrame(index=base_index)

        # --- reindex to daily and forward fill ---
        fundamentals = fundamentals.resample("D").ffill()

        return fundamentals